nav.sorting
  | Order By:
  a.sort(href=url_with(false,{orderby:'value'}),
    data-sort-options='{"data":"value", "order":"desc"}',
    class="xhr funding" + (query.orderby == 'value' ? ' active' : ''))
    span Funding Size 
  a.sort(href=url_with(false,{orderby:'name'}), 
    data-sort-options='{"data":"name"}',
    class="xhr az" + (query.orderby == 'name' ? ' active' : ''))
    span A-Z

.filter.zoomable
  h2 Filter by #{name}

  - if(!query[key]) query[key] = []
  - delete query.xhr
  - current_codes = _.flatten([query[key]])
  - if (choices.length > 0)
    ul.choices.clearfix
      each choice in choices
        - if (choice.code && choice.name && choice.count != 0)
          - selected = _.include(current_codes, choice.code)
          li.choice.bubble.hidden(
            id='choice-' + choice.code, class = selected ? 'selected' : '',
            data-name=choice.name, data-value=parseFloat(choice.value), data-colour=''
          )
            //- .outline
            .inner
              - q = _.extend({}, query)
              //- - q[key] = selected ? _.without(current_codes, choice.code) : current_codes.concat(choice.code)
              - q[key] = _.uniq(current_codes.concat(choice.code))
              a.content.xhr(href=url('/activities', q))
                - v = format_value(choice.value, true)
                | #{title_case(choice.name)} <br/> #{choice.count} activit#{choice.count == 1 ? "y" : "ies"}\n $#{v.value}#{v.unit}
                //- p.text.xhidden #{title_case(choice.name)}\n #{choice.count} activit#{choice.count == 1 ? "y" : "ies"}\n $#{v.value}#{v.unit}
  - else
    h3 Sorry, you cannot filter any further by #{type}.

script
  inlines.push(function() {
    // intercept the sorting 
    $('.sort', this).bind('click touchstart',function(e){
      e.preventDefault();
      e.stopPropagation();
      $this = $(this);
      $('ul.choices>li').tsort($this.data('sort-options'));
      $this.addClass('active').siblings().removeClass('active');
      if(hasTouch){
        hideOffscreen();
      }
    }).last().click();
    
    var wrapper = $(".zoomable");
    var container = wrapper.children(".choices");
    var choices = container.children(".choice");
    var content = choices.find(".content");
    
    var font = {min: 8, max: 25};
    Math.seedrandom(container.map(function() { return $(this).attr("id"); }).toArray().join(""));
    container.bubbleLayout({
      bubbleClasses: bubbleClasses, 
      layout: 'list', font: font, 
      diameter: {min: 130, max: 250},
      afterFit: function() {
        var notEmpty = function() { return $(this).text() !== ""; }
        var textLines = $(this).children().filter(notEmpty).toArray();
        $(textLines.slice(-2)).addClass("small");
      }
    });
    
    //Stores queue of bubbles to have text fitted
    var textFittingQueue = [];
    
    // hack to hide any elements that are 
    // out of view of the window.
    // grossly inefficient, needs fixed
    var hideOffscreen = function(){
      var y = (zoomer.y / zoomer.scale);
      var hscale = zoomer.scale;
      var wh = $(window).height();
      
      textFittingQueue = [];
      choices.each(function(){
        var $this = $(this);
        var top = $this.offset().top;
        var height = $this.height() * hscale;
        
        // window + .5 each way
        var show = top < (wh*1.5) && top > -(wh/2) -height;
        if (show && !$this.hasClass('text-fitted')) textFittingQueue.push($this);
        $this.css('visibility', show ? 'visible' : 'hidden')
      });
    }

    var currentScale = 1;
    var zoom = $(".zoomable");
    var zoomer = new Zoomer(zoom.get(0), zoom.find('li').toArray(),{
        finish:function(){
          
          // assign the variables that would be supplied by zynga
          var zoom = this.scale;
          var zoomed = zoom - currentScale;
          currentScale = zoom;
          
          hideOffscreen();
          
          var min = Math.round(font.min / zoom);
          var filter = zoomed > 0 ? ".truncated" : function() { return parseInt($(this).css("font-size"), 10) < min; };
          content.filter(filter).fitText('circular', {font: {min: min, max: font.max}});
        }
    });

    
    var hasTouch = "ontouchstart" in window;
    if(hasTouch){
      hideOffscreen();
    } else {
      textFittingQueue = choices.toArray();
    }
    
    //Adjusts font size after fitting text: BROKEN
    var afterFit = function() {
      //var notEmpty = function() { return $(this).text() !== ""; }
      //var textLines = $(this).children().filter(notEmpty).toArray();
      //$(textLines.slice(-2)).addClass("small");
    };
    
    //Fits text for visible elements when not scrolling
    var totalElems = choices.length;
    var fittedElems = 0;
    var fitText = function() {
      if (textFittingQueue.length > 0 && zoomer.touches == 0) {
        var elem = $(textFittingQueue.shift());
        elem.find(".inner").fitText('circular', {font: font, afterFit: afterFit});
        elem.addClass('text-fitted');
        fittedElems++;
      }
      if (fittedElems < totalElems) setTimeout(fitText, 0);
    }
    fitText();
    

    
    $.setArcNav(!{JSON.stringify(query)})
  });
  